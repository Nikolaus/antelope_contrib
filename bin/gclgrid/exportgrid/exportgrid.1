.TH EXPORTGRID 1 "$Date$"
.SH NAME
exportgrid - ascii output of GCLgrid objects
.SH SYNOPSIS
.nf
exportgrid db|fname gridname [-fin -f fieldname -3d (-scalar | -vector n) -o outfile -dir outdir]
.fi
.SH DESCRIPTION
.LP
This is a relatively crude program to output the contents of various
GCLgrid related objects as simple ascii data.  This implementation supports
three data type:  GCLgrid, GCLgrid3d, GCLscalarfield, GCLscalarfield3d,
GCLvectorfield, and GCLvectorfield3d.  In all cases the object's contents
are dumped to stdout.  The type of object to dump is implied from combinations
of the arguments passed to the program.  See the following section for a 
description of how this works.

The default requires two arguments.  
The first is one of two things depending on whether or not the flag -fin is used.
If -fin does not appear (the default) 
\fIdb\fR is assumed to be an
Antelope database name containing at least a gclgdisk table and 
gclfield table if a field object is to being referenced.  If the -fin 
flag appears argument 1 is assumed to a base file name where the data are stored.
Argument 2, \fIgridname\fR, is also required.  It defines a unique name assigned to 
a particular grid referenced in the gclgdisk table.  Although it is required it is 
ignored for file input mode.  
.SH OPTIONS
.IP -fin
File mode switch (see above).
.IP -f
Dump the field with the unique name \fIfieldname\fR defined in the gclfield
table.  The field and grid names must be consistent or the program will
abort.  When reading from a database this is the key defined in the
fieldname attribute of the gclfield table.  When -fin in set (file input
mode) this is assume to be the base file name containing the field
object you want to export as text to stdout.
.IP -3d
Switch to 3d mode.  The default assumes the grid/field are 2d objects.
.IP -scalar
Assume the field being referenced is a scalar field object.  If it is not
the program will abort with an error message saying that.  
Note that if -f is used either -scalar or -vector must be defined.
.IP -vector
Assume the field being referenced is a vector field object.  
When -vector is set you must define the number of vector components
expected.  This must match data or the program will exit. This is 
an intentional sanity check.   This number is defined in the gclfield
table in database mode or the pf component of the file pair when 
running in file mode (-fin). 
Note that if -f is used either -scalar or -vector must be defined.
.LP
The -f, -3d, and -vector options work together to define the type of 
object the program tries to load.  If -f is not used the assumption is
only grid geometry is to be written to output.  The -3d option is a
switch between the class of 2d and 3d GCLgrid/field objects. Finally,
the -vector argument is required if a field being referenced is a 
vector field. 
.IP -o
If this flag appears data will be sent to outfile instead of stdout in a format
that can read in the -fin mode.   i.e. this is the mechanism to export data from
a database to a file format that can be read without using a database.   Note it 
is a fatal error to use -fin with -o since the input and output would then be
completely identical.
.SH FILES
.LP
At this time the output format is very different for field objects
and grid objects.  The format for grid object is simpler and is just a series
of blank separated fields defining (in order):  latitude (degrees),
longitude (degrees), and depth (km).  
.LP
For field data this program is little more than a front end for
the C++ operator << for these objects.  The format is:
.LP
\fILine 1:\fR  is a blank separated list of two or three integers; 
two for 2d and three for 3d data.  These define the number of node
points in x1, x2, and x3 directions respectively.  
.LP
The remainder of the file is a series of lines with a count equal to 
the product of the integers printed on line 1.  Each line of these
lines is a blank separated list of attributes in the following order:
x1, x2, x3, latitude, longitude, radius, val(1), ..., val(nv)
where x1,x2, and x3 are the location of this grid point in the 
Cartesian system used internally by the GCLgrid library; 
latitude, longitude, and radius are Earth coordinates, and 
val(1) to val(nv) are the nv data values associated with this 
grid point.  For scalar fields nv is 1 so there is only one val.  
.SH "SEE ALSO"
.nf
http://www.indiana.edu/~pavlab/software/gclgrid/html/index.html
.fi
.SH "BUGS AND CAVEATS"
.IP (1)
The program does not automatically make a sanity check for scalar versus
vector fields.  The output will be scrambled if a vector field is referenced
without using the -vector flag.  I am not sure what will happen if a 
scalar field is referenced with the -vector flag set.  
Remember that famous quote:  "Do you feel lucky?  Do ya, punk?".
.IP (2)
The file input and output mode were kind of shoehorned into an older code that
was pure database input.   This created some confusing oddities in the behaviour from
dependencies on arguments.
.SH AUTHOR
.nf
Gary L. Pavlis
Indiana University
pavlis@indiana.edu
.fi
.\" $Id$
